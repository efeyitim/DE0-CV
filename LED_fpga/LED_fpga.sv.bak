module LED
#(parameter W = 32)
(
	input clk,
	input button,
	output logic [3:0] LEDs = 4'b1111
);

	//user defined leds are D4, D7, D9, D10
	//D4 = USER_LED_G0, USER_LED_R0 B19 B18
	//D7 = USER_LED_G1, USER_LED_R1 E17 F17
	//D9 = USER_LED_G2, USER_LED_R2 D18 E18
	//D10 = USER_LED_G3, USER_LED_R3 D19 E19
	//The LEDs illuminate when a logic 0 is driven, and turn OFF when a logic 1 is driven.

	
	//user defined buttons are S5, S6, S7
	//S5 = USER_PB2 FPGA PIN NUMBER=B17
	//S6 = USER_PB1 FPGA PIN NUMBER=A19
	//S7 = USER_PB0 FPGA PIN NUMBER=B20
	//When you press and hold down the button, the device pin is set to logic 0. When you release the button, the device pin is set to logic 1.
	
	//CLK_FPGA_50M 50MHZ PIN=BH33

	typedef enum {IDLE, PRESS, DEBOUNCE} state_t;
	
	state_t STATE, NEXT;

	logic [W-1:0] count = 0;
	logic [W-1:0] debounce_count = 0;
	
	logic button_prev = 1;
	logic debounce_done = 0;										//is debounce done
	logic debounce_success = 0;									//is debounce successful
	
	logic button_state = 0;											//0 = idle, 1 = press
	
	
	logic button_pulse;
	logic button_press;
	logic button_release;
	assign button_pulse = button ^ button_prev;				//two pulses, at press and at release
	assign button_press = button_pulse & button_prev;		//press pulse
	assign button_release = button_pulse & button;			//release pulse
	
	
	//state_reg
	always_ff @(posedge clk)
		STATE <= NEXT;
		
	
	//next_state function
	always_comb
	begin
		unique case (STATE)
			PRESS:		begin
								if (button_pulse)
									NEXT = DEBOUNCE;
								else
									NEXT = PRESS;
							end
						
			DEBOUNCE:	begin
								if (debounce_done)
								begin
									if (debounce_success)
									begin
										if (button_state)
											NEXT = IDLE;
										else
											NEXT = PRESS;
									end
									
									else
									begin
										if (button_state)
											NEXT = PRESS;
										else
											NEXT = IDLE;
									end
										
								end
								
								else
								begin
									NEXT = DEBOUNCE;
								end
							end
							
			IDLE:			begin
								if (button_pulse)
									NEXT = DEBOUNCE;
								else
									NEXT = IDLE;			
							end
		endcase
	end
	
	
	//datapath
	always_ff @(posedge clk)
	begin
		unique case (STATE)
			PRESS:		begin
								debounce_done <= 1'b0;
								count <= count + 1'b1;
								if (count == 32'd200000000) //1 second wrt 50mhz
								begin
									LEDs <= LEDs - 1'b1;
									count <= 32'h00000000;
								end		
							end
						
			DEBOUNCE:	begin
								debounce_count <= debounce_count + 1'b1;
								if (debounce_count == 32'd20000000) //0.1 sec wrt 50 mhz
								begin
									//check if the button is really pressed, ..
									//if pressed = debounce_success = 1;
									//else debounce_success = 0;
									//debounce_count = 0 no matter what.								
									if ()																						//bir bu eksik kaldi, basarili oldugunu nasil anlariz
										debounce_success <= 1'b1;
									else
										debounce_success <= 1'b0;
									debounce_count <= 32'h00000000;
									debounce_done <= 1'b1;
								end								
							end
							
			IDLE:			begin
								debounce_done <= 1'b0;
								LEDs <= 4'b1111;
								count <= 32'h00000000;			
							end
		endcase
	end
	

endmodule