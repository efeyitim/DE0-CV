---------------------------------------------------------------------------------------------------
--  Project Name        :   Generic
--  System/Block Name   :   Asynchronous FIFO
--  Design Engineer     :   Efe Berkay YITIM
--  Date                :   29.11.2022
--  Short Description   :   
---------------------------------------------------------------------------------------------------
--  Revisions
--  Designer            Date            Description
--  -----------         ----------      -----------------------------------------------------------
--  Efe Berkay YITIM    29.11.2022          v1.0 Initial Release
---------------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity async_fifo is

    generic (
        DATA_WIDTH : integer := 4;
        ADDR_WIDTH : integer := 4);
    
    port
        (
            aclr    : in  std_logic := '0';
            data    : in  std_logic_vector (DATA_WIDTH - 1 downto 0);
            rdclk   : in  std_logic;
            rdreq   : in  std_logic;
            wrclk   : in  std_logic;
            wrreq   : in  std_logic;
            q       : out std_logic_vector (DATA_WIDTH - 1 downto 0);
            rdempty : out std_logic;
            rdusedw : out std_logic_vector ();
            wrfull  : out std_logic;
            wrusedw : out std_logic_vector ()
            );
    
end async_fifo;

architecture rtl of async_fifo is

    signal waddr, raddr : std_logic_vector(ADDR_WIDTH - 1 downto 0);
    signal wfull_next, rempty_next : std_logic;
    signal wgray, wbin, wq2_rgray, wq1_rgray : std_logic_vector(ADDR_WIDTH downto 0);
    signal rgray, rbin, rq2_wgray, rq1_wgray : std_logic_vector(ADDR_WIDTH downto 0);

    signal wgraynext, wbinnext : std_logic_vector(ADDR_WIDTH downto 0);
    signal rgraynext, rbinnext : std_logic_vector(ADDR_WIDTH downto 0);

    type mem_type is array (0 to 2**ADDR_WIDTH - 1) of std_logic_vector(DATA_WIDTH - 1 downto 0);

    signal block_ram : mem_type := (others => (others => '0'));
    
begin  -- architecture rtl

    

end architecture rtl;

